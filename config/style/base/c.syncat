import "../colours.syncat";

primitive_type,
type_identifier {
  color: $type;
}

preproc_include > /^#/,
preproc_function_def > /^#/,
preproc_def > /^#/,
preproc_directive > /^#/,
preproc_if > /^#/,
preproc_ifdef > /^#/,
preproc_elif > /^#/,
preproc_else > /^#/ {
  color: $meta;
  dim: true;
}

type_qualifier,
sized_type_specifier,
storage_class_specifier,
"struct", "enum", "typedef",
"return", "break", "continue",
"if", "else", "for", "while", "do",
"switch", "case", "default",
"sizeof", "static" {
  color: $keyword;
}

preproc_function_def > identifier,
call_expression > identifier,
function_declarator > identifier {
  color: $function;
}

subscript_expression > "[",
subscript_expression > "]",
"==", "!=", "<", ">", "<=", ">=",
"!", "&&", "||",
"+", "-", "*", "/", "|", "&", "^", "~", "%",
"=", "+=", "-=", "*=", "/=", "|=", "&=", "^=", "%=", "++", "--",
"->", "..." {
  color: $operator;
}

preproc_ifdef > identifier,
preproc_def > identifier,
number_literal,
null, true, false {
  color: $value;
}

identifier & /^[A-Z0-9_]+$/ {
  color: $constant;
}

system_lib_string {
  color: $builtin;
}

char_literal,
string_literal {
  color: $string;
}

comment {
  color: $comment;
  italic: true;
}
